@using CommunityToolkit.Mvvm.ComponentModel;
@using Midgard;
@using ApexCharts;
@inherits MvvmComponentBase<MainViewModel>

<DataLoaderProgress DataLoader="BindingContext.PoolLiquidityHistoryVM.DataLoader" Title="@($"{BindingContext.SelectedAsset} Liquidity Volume")" />
@if (BindingContext.PoolLiquidityHistoryVM.DataLoader.LoadingState != LoadingState.Finished) return;
@if (BindingContext.PoolLiquidityHistoryVM.Data?.Intervals == null) return;


<ApexChart @ref="chart"
           TItem="LiquidityHistoryItem"
           XAxisType="XAxisType.Datetime"
           Options="options"
           Title="@($"{BindingContext.SelectedAsset} Liquidity Volume")">

    <ApexPointSeries TItem="LiquidityHistoryItem"
                     Items="BindingContext.PoolLiquidityHistoryVM.Data!.Intervals"
                     Name="add volume"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.AddLiquidityVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />

    <ApexPointSeries TItem="LiquidityHistoryItem"
                     Items="BindingContext.PoolLiquidityHistoryVM.Data!.Intervals"
                     Name="withdraw volume"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.WithdrawVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />

</ApexChart>


@code {

    private ApexChart<LiquidityHistoryItem>? chart;
    private ApexChartOptions<LiquidityHistoryItem> options = ChartConfig.GetDefaultChartOptions<LiquidityHistoryItem>();

    protected override void OnInitialized()
    {
        options.Yaxis = new List<YAxis>();
        options.Yaxis.Add(new YAxis
            {
                Title = new AxisTitle { Text = "Volume" },
                Labels = new YAxisLabels
                {
                    Formatter = @"function (value) {
                    return '$' + Number(value).toLocaleString();}"
                }
            }
        );

        options.Chart = new Chart { Group = "dateSync" };

        WatchDataLoaderVM(BindingContext.PoolLiquidityHistoryVM);

        base.OnInitialized();
    }

    protected override async Task ChartRenderAsync()
    {
        if (chart != null && BindingContext.PoolLiquidityHistoryVM.Data?.Intervals != null)
            await chart.RenderAsync();

        await base.ChartRenderAsync();
    }
}

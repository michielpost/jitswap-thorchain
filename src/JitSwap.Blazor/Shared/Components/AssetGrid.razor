@using Midgard;
@inherits MvvmComponentBase<MainViewModel>

<MudText>Assets</MudText>

<DataLoaderProgress DataLoader="BindingContext.PoolsList" />

@if (BindingContext.PoolsList.Data?.Any() ?? false && FilteredItems != null)
{
    <QuickGrid Items="@FilteredItems" ResizableColumns="true" Pagination="@pagination">
        <TemplateColumn Title="Asset" SortBy="sortByName">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Asset name..." />
                </div>
            </ColumnOptions>
            <ChildContent>
                <b><a href="assets/@context.Asset">@context.Asset</a></b>
            </ChildContent>
        </TemplateColumn>
        <PropertyColumn Property="@(c => c.Volume24h)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.RuneDepth)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.AssetDepth)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.AssetPrice)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.AssetPriceUSD)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.AnnualPercentageRate)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.PoolAPY)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.Status)" Sortable="true" />
        <PropertyColumn Property="@(c => c.LiquidityUnits)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.SynthUnits)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.SynthSupply)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.Units)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.NativeDecimal)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.SaversUnits)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
        <PropertyColumn Property="@(c => c.SaversDepth)" Sortable="true" Align="Microsoft.AspNetCore.Components.QuickGrid.Align.Right" />
    </QuickGrid>

    <Paginator Value="@pagination" />
}

@code {
    IQueryable<PoolDetail>? items;
    PaginationState pagination = new PaginationState { ItemsPerPage = 15 };
    string nameFilter = string.Empty;

    GridSort<PoolDetail> sortByName = GridSort<PoolDetail>
      .ByAscending(p => p.Asset);

    IQueryable<PoolDetail>? FilteredItems => items?.Where(x => x.Asset.Contains(nameFilter, StringComparison.CurrentCultureIgnoreCase));

    protected override async Task LoadDataAsync()
    {
        await BindingContext.LoadPoolsList();

        items = BindingContext.PoolsList?.Data?.AsQueryable();
    }
}

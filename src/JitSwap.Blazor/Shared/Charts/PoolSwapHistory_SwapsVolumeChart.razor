@using CommunityToolkit.Mvvm.ComponentModel;
@using Midgard;
@inherits MvvmComponentBase<MainViewModel>

<DataLoaderProgress DataLoader="BindingContext.PoolSwapHistoryDataLoader" />
@if (BindingContext.PoolSwapHistoryDataLoader.LoadingState != LoadingState.Finished) return;


<ApexChart TItem="SwapHistoryItem"
           XAxisType="XAxisType.Datetime"
           Options="options"
           Title="@($"{Asset} Swap Volume")">

    <ApexPointSeries TItem="SwapHistoryItem"
                     Items="BindingContext.PoolSwapHistory!.Intervals"
                     Name="@($"to {Asset}")"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.ToAssetVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />

    <ApexPointSeries TItem="SwapHistoryItem"
                     Items="BindingContext.PoolSwapHistory!.Intervals"
                     Name="to RUNE"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.ToRuneVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />

    <ApexPointSeries TItem="SwapHistoryItem"
                     Items="BindingContext.PoolSwapHistory!.Intervals"
                     Name="SynthMintVolume"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.SynthMintVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />

    <ApexPointSeries TItem="SwapHistoryItem"
                     Items="BindingContext.PoolSwapHistory!.Intervals"
                     Name="SynthRedeemVolume"
                     SeriesType="SeriesType.Line"
                     XValue="@(e => DateTimeOffset.FromUnixTimeSeconds(Convert.ToInt64(e.StartTime)))"
                     YAggregate="@(e => e.Sum(e => Convert.ToInt64(e.SynthRedeemVolume) / 100000000 * Convert.ToDecimal(e.RunePriceUSD)))"
                     OrderBy="e=>e.X" />


   

</ApexChart>


@code {

    [Parameter]
    public string? Asset { get; set; }

    private ApexChartOptions<SwapHistoryItem> options = ChartConfig.GetDefaultChartOptions<SwapHistoryItem>();

    protected override void OnInitialized()
    {
        options.Yaxis = new List<YAxis>();
        options.Yaxis.Add(new YAxis
            {
                Labels = new YAxisLabels
                {
                    Formatter = @"function (value) {
                    return '$' + Number(value).toLocaleString();}"
                }
            }
        );
        options.Chart = new Chart { Group = "dateSync" };

        base.OnInitialized();
    }

    protected override void OnParametersSet()
    {
        BindingContext.PoolSwapHistoryDataLoader.Clear();
        base.OnParametersSet();
    }

    protected override async Task LoadDataAsync()
    {
        if (!string.IsNullOrEmpty(Asset))
            await BindingContext.LoadPoolSwapHistory(Asset, Midgard.Interval4.Day, 30, null, null);
    }

}
